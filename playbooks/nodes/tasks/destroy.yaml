---
- name: set two values
  set_fact:
    leftbrace: "{"
    rightbrace: "}"

- name: List all the chaincode containers
  command: >-
    docker ps -a --format
    '{{ leftbrace }}{{ leftbrace }} .Names {{ rightbrace }}{{ rightbrace }}'
  register: containers

- name: Remove the container
  command: >-
    docker rm -f {{ item }}
  when: item.startswith('dev-') or item.startswith('dashboard.')
  with_items: "{{ containers.stdout_lines}}"

- name: List all the chaincode container images
  command: >-
    docker images --format
    '{{ leftbrace }}{{ leftbrace }} .Repository {{ rightbrace }}{{ rightbrace }}'
  register: images

- name: Remove the chaincode container images
  command: >-
    docker rmi -f {{ item }}:latest
  when: item.startswith('dev-')
  with_items: "{{ images.stdout_lines}}"

- name: Add couchdb containers if couchdb is used
  set_fact:
    allcontainers: >-
      {{ allcontainers|default([]) + [item.fullname + '.couchdb'] }}
  with_items: "{{ allpeers }}"
  when: DB_TYPE == "couchdb"

- name: Create all the known container list
  set_fact:
    allcontainers: >-
      {{ allcontainers|default([]) + [item.fullname] }}
  with_items: "{{ [{'fullname': 'cli'}] + allpeers + allorderers + allcas }}"

- name: "Remove container {{ item }}"
  include_tasks: "removecontainer.yaml"
  loop: "{{ allcontainers }}"
  loop_control:
    loop_var: item
  when: status_flag == "Success"

- name: Remove env file for all nodes
  file:
    path: "{{ pjroot }}/vars/run/{{ item.fullname }}.env"
    state: absent
  with_items: "{{ allpeers + allorderers + allcas }}"

- name: Query Fabric docker network
  command: >-
    docker network ls -f 'name=minifab' -q
  register: netstat

- name: Delete fabric docker network if it exists
  command: "docker network rm minifab"
  when: netstat.stdout != ""

- name: Remove volumes not being used
  command: >-
    docker volume prune -f
